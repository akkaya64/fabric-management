version: '3.8'

services:
  # Infrastructure services
  postgres:
    image: postgres:16-alpine
    container_name: fabric-postgres
    environment:
      POSTGRES_USER: fabric
      POSTGRES_PASSWORD: fabric123
      POSTGRES_DB: fabric
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fabric"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: fabric-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  consul:
    image: hashicorp/consul:latest
    container_name: fabric-consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: 'agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0'
    volumes:
      - consul-data:/consul/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:latest
    container_name: fabric-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - fabric-network
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fabric-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: fabric-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - fabric-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: fabric-zipkin
    ports:
      - "9411:9411"
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: fabric-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: fabric-logstash
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx512m
    volumes:
      - ./infrastructure/monitoring/elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./infrastructure/monitoring/elk/logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - fabric-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: fabric-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - fabric-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development services (optional, commented out for local development)
  # These services would typically be run directly from the IDE during development

  # api-gateway:
  #   build:
  #     context: ./infrastructure/api-gateway
  #     dockerfile: Dockerfile.dev
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=dev
  #     - SPRING_CLOUD_CONSUL_HOST=consul
  #     - SPRING_REDIS_HOST=redis
  #     - APP_JWT_SECRET=aVeryLongSecretKeyThatShouldBeAtLeast256BitsInProductionEnvironment
  #   depends_on:
  #     - consul
  #     - redis
  #     - zipkin
  #   networks:
  #     - fabric-network

  # auth-service:
  #   build:
  #     context: ./services/identity/auth-service
  #     dockerfile: Dockerfile.dev
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=dev
  #     - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fabric
  #     - SPRING_DATASOURCE_USERNAME=fabric
  #     - SPRING_DATASOURCE_PASSWORD=fabric123
  #     - SPRING_CLOUD_CONSUL_HOST=consul
  #     - APP_JWT_SECRET=aVeryLongSecretKeyThatShouldBeAtLeast256BitsInProductionEnvironment
  #   depends_on:
  #     - postgres
  #     - consul
  #     - zipkin
  #   networks:
  #     - fabric-network

  # user-service:
  #   build:
  #     context: ./services/identity/user-service
  #     dockerfile: Dockerfile.dev
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=dev
  #     - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fabric
  #     - SPRING_DATASOURCE_USERNAME=fabric
  #     - SPRING_DATASOURCE_PASSWORD=fabric123
  #     - SPRING_CLOUD_CONSUL_HOST=consul
  #     - APP_JWT_SECRET=aVeryLongSecretKeyThatShouldBeAtLeast256BitsInProductionEnvironment
  #   depends_on:
  #     - postgres
  #     - consul
  #     - zipkin
  #   networks:
  #     - fabric-network

networks:
  fabric-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  consul-data:
  kafka-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data: