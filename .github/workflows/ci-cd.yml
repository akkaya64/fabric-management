name: Fabric Management CI/CD

on:
  push:
    branches: [ main, develop, fatih ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  VERSION: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Fix dependency issues for CI
        run: |
          chmod +x scripts/ci-dependency-fix.sh
          ./scripts/ci-dependency-fix.sh
          python3 scripts/fix-pom-versions.py
          
      - name: Verify Java commons and security libraries
        run: |
          echo "Verifying fabric-java-commons and fabric-java-security in local Maven repository"
          ls -la ~/.m2/repository/com/fabric/fabric-java-commons/ || echo "fabric-java-commons not found"
          ls -la ~/.m2/repository/com/fabric/fabric-java-security/ || echo "fabric-java-security not found"
          
      - name: Build with Maven
        run: mvn clean verify -Dmaven.enforcer.skip=true

      - name: Build logistics services specifically
        run: |
          echo "Building logistics services specifically..."
          mvn clean verify -f services/logistics/shipping-service/pom.xml -Dmaven.enforcer.skip=true
          mvn clean verify -f services/logistics/transportation-service/pom.xml -Dmaven.enforcer.skip=true

      - name: Run Tests
        run: mvn test -Dmaven.enforcer.skip=true

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3
      
      - name: Fix dependency issues for CI
        run: |
          chmod +x scripts/ci-dependency-fix.sh
          ./scripts/ci-dependency-fix.sh
          python3 scripts/fix-pom-versions.py
          
      - name: Verify Java commons and security libraries
        run: |
          echo "Verifying fabric-java-commons and fabric-java-security in local Maven repository"
          ls -la ~/.m2/repository/com/fabric/fabric-java-commons/ || echo "fabric-java-commons not found"
          ls -la ~/.m2/repository/com/fabric/fabric-java-security/ || echo "fabric-java-security not found"
          
      - name: Maven package with dependencies
        run: |
          mvn clean package -DskipTests -Dmaven.enforcer.skip=true
          mvn package -f services/logistics/shipping-service/pom.xml -DskipTests -Dmaven.enforcer.skip=true
          mvn package -f services/logistics/transportation-service/pom.xml -DskipTests -Dmaven.enforcer.skip=true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push API Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./infrastructure/api-gateway
          push: true
          tags: ${{ env.REGISTRY }}/fabric/api-gateway:${{ env.VERSION }},${{ env.REGISTRY }}/fabric/api-gateway:latest

      - name: Build and push Auth Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/identity/auth-service
          push: true
          tags: ${{ env.REGISTRY }}/fabric/auth-service:${{ env.VERSION }},${{ env.REGISTRY }}/fabric/auth-service:latest
          
      - name: Build and push Shipping Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/logistics/shipping-service
          push: true
          tags: ${{ env.REGISTRY }}/fabric/shipping-service:${{ env.VERSION }},${{ env.REGISTRY }}/fabric/shipping-service:latest
          
      - name: Build and push Transportation Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/logistics/transportation-service
          push: true
          tags: ${{ env.REGISTRY }}/fabric/transportation-service:${{ env.VERSION }},${{ env.REGISTRY }}/fabric/transportation-service:latest

  deploy-dev:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}

      - name: Deploy to development
        run: |
          # Kubernetes manifestlerinde imaj versiyonlarını güncelle
          find infrastructure/kubernetes/deployments -type f -name "*.yaml" -exec sed -i "s|\${REGISTRY}|${{ env.REGISTRY }}|g" {} \;
          find infrastructure/kubernetes/deployments -type f -name "*.yaml" -exec sed -i "s|\${VERSION}|${{ env.VERSION }}|g" {} \;
          
          # Kubernetes manifestlerini uygula
          kubectl apply -f infrastructure/kubernetes/config-maps/
          kubectl apply -f infrastructure/kubernetes/secrets/
          kubectl apply -f infrastructure/kubernetes/deployments/
          kubectl apply -f infrastructure/kubernetes/ingress/