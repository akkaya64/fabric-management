version: '3.8'

services:
  # Infrastructure services
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: fabric
      POSTGRES_PASSWORD: fabric123
      POSTGRES_DB: fabric
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fabric"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - fabric-network
    volumes:
      - kafka-data:/bitnami/kafka

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - fabric-network
    volumes:
      - zookeeper-data:/bitnami/zookeeper

  consul:
    image: hashicorp/consul:latest
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: 'agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0'
    volumes:
      - consul-data:/consul/data
    networks:
      - fabric-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - fabric-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - fabric-network
    depends_on:
      - prometheus

  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    networks:
      - fabric-network

  # Application services
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: dev
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
    depends_on:
      - consul
      - zipkin
    networks:
      - fabric-network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: dev
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fabric
      - SPRING_DATASOURCE_USERNAME=fabric
      - SPRING_DATASOURCE_PASSWORD=fabric123
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
    depends_on:
      - postgres
      - consul
      - zipkin
    networks:
      - fabric-network

  user-service:
    build:
      context: ./java-services/user-service
      dockerfile: Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: dev
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fabric
      - SPRING_DATASOURCE_USERNAME=fabric
      - SPRING_DATASOURCE_PASSWORD=fabric123
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - consul
      - zipkin
      - kafka
    networks:
      - fabric-network

  # Add other services with similar configuration...

networks:
  fabric-network:
    driver: bridge

volumes:
  postgres-data:
  kafka-data:
  zookeeper-data:
  consul-data:
  prometheus-data:
  grafana-data: