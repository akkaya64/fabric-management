version: '3.8'

services:
  shipping-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fabric-shipping-service
    ports:
      - "8088:8088"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fabric_shipping_db
      - SPRING_DATASOURCE_USERNAME=fabric
      - SPRING_DATASOURCE_PASSWORD=fabric123
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOGGING_PATTERN_CONSOLE=%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5level) [%thread] %cyan(%logger{36}) - %msg%n
      - LOGGING_LOGSTASH_ENABLED=true
      - LOGGING_LOGSTASH_HOST=logstash
      - LOGGING_LOGSTASH_PORT=5000
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true
      - MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true
      - MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - postgres
      - consul
      - kafka
      - zipkin
      - logstash

  postgres:
    image: postgres:16-alpine
    container_name: fabric-postgres-shipping
    environment:
      POSTGRES_USER: fabric
      POSTGRES_PASSWORD: fabric123
      POSTGRES_DB: fabric_shipping_db
    ports:
      - "5433:5432"
    volumes:
      - postgres-shipping-data:/var/lib/postgresql/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fabric"]
      interval: 10s
      timeout: 5s
      retries: 5

  consul:
    image: hashicorp/consul:latest
    container_name: fabric-consul-shipping
    ports:
      - "8501:8500"
    command: 'agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0'
    volumes:
      - consul-shipping-data:/consul/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:latest
    container_name: fabric-kafka-shipping
    ports:
      - "9093:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - fabric-network
    volumes:
      - kafka-shipping-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: fabric-zipkin-shipping
    ports:
      - "9412:9411"
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: fabric-logstash-shipping
    ports:
      - "5045:5044"
      - "5001:5000/tcp"
      - "5001:5000/udp"
      - "9601:9600"
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx512m
    volumes:
      - logstash-shipping-data:/usr/share/logstash/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  fabric-network:
    driver: bridge

volumes:
  postgres-shipping-data:
  consul-shipping-data:
  kafka-shipping-data:
  logstash-shipping-data: