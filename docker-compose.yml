version: '3.8'

services:
  # Infrastructure services
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: fabric
      POSTGRES_PASSWORD: fabric123
      POSTGRES_DB: fabric
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fabric"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - fabric-network
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - fabric-network
    volumes:
      - zookeeper-data:/bitnami/zookeeper

  consul:
    image: hashicorp/consul:latest
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: 'agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0'
    volumes:
      - consul-data:/consul/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring & Observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - fabric-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./monitoring/elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./monitoring/elk/elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    ports:
      - "5001:5000"  # 5000 portunu 5001'e değiştirdim (host:container)
      - "5044:5044"
      - "9600:9600"
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx512m
    volumes:
      - ./monitoring/elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./monitoring/elk/logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - fabric-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.0
    user: root
    volumes:
      - ./monitoring/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - fabric-network
    depends_on:
      logstash:
        condition: service_healthy
    command: filebeat -e -strict.perms=false

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - fabric-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=elasticsearch
      - ES_HOSTS=http://elasticsearch:9200
      - ES_INDEX=zipkin
      - JAVA_OPTS=-Xms512m -Xmx512m
    networks:
      - fabric-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application services
  api-gateway:
    build:
      context: .  # Kök dizin
      dockerfile: api-gateway/Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: dev
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fabric
      - SPRING_DATASOURCE_USERNAME=fabric
      - SPRING_DATASOURCE_PASSWORD=fabric123
      - LOGGING_PATTERN_CONSOLE=%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5level) [%thread] %cyan(%logger{36}) - %msg%n
      - LOGGING_LOGSTASH_ENABLED=true
      - LOGGING_LOGSTASH_HOST=logstash
      - LOGGING_LOGSTASH_PORT=5000  # Bu port konteyner içindeki port (değiştirmeye gerek yok)
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true
      - MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true
      - MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true
    depends_on:
      consul:
        condition: service_healthy
      zipkin:
        condition: service_healthy
      postgres:
        condition: service_healthy
      logstash:
        condition: service_healthy
    networks:
      - fabric-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  auth-service:
    build:
      context: .  # Kök dizin
      dockerfile: services/identity/auth-service/Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: dev
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fabric
      - SPRING_DATASOURCE_USERNAME=fabric
      - SPRING_DATASOURCE_PASSWORD=fabric123
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - LOGGING_PATTERN_CONSOLE=%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5level) [%thread] %cyan(%logger{36}) - %msg%n
      - LOGGING_LOGSTASH_ENABLED=true
      - LOGGING_LOGSTASH_HOST=logstash
      - LOGGING_LOGSTASH_PORT=5000  # Bu port konteyner içindeki port (değiştirmeye gerek yok)
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true
      - MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true
      - MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true
    depends_on:
      consul:
        condition: service_healthy
      zipkin:
        condition: service_healthy
      postgres:
        condition: service_healthy
      logstash:
        condition: service_healthy
    networks:
      - fabric-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  user-service:
    build:
      context: .  # Kök dizin
      dockerfile: services/identity/user-service/Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: dev
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fabric
      - SPRING_DATASOURCE_USERNAME=fabric
      - SPRING_DATASOURCE_PASSWORD=fabric123
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOGGING_PATTERN_CONSOLE=%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5level) [%thread] %cyan(%logger{36}) - %msg%n
      - LOGGING_LOGSTASH_ENABLED=true
      - LOGGING_LOGSTASH_HOST=logstash
      - LOGGING_LOGSTASH_PORT=5000  # Bu port konteyner içindeki port (değiştirmeye gerek yok)
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true
      - MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true
      - MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true
    depends_on:
      consul:
        condition: service_healthy
      zipkin:
        condition: service_healthy
      postgres:
        condition: service_healthy
      logstash:
        condition: service_healthy
    networks:
      - fabric-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Diğer servisler için de benzer yapılandırmayı ekleyebilirsiniz...

networks:
  fabric-network:
    driver: bridge

volumes:
  postgres-data:
  kafka-data:
  zookeeper-data:
  consul-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data: